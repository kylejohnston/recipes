---
// PURPOSE: HOMEPAGE
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import MainNav from '../components/MainNav.astro';
import PostList from '../components/PostList.astro';

// Component Script:
// You can write any JavaScript/TypeScript that you'd like here.
// It will run during the build, but never in the browser.
// All variables are available to use in the HTML template below.
let title = 'Recipes · 🐼';
let description = 'Our favorite recipes.';
let permalink = 'https://www.softpanda.de/';

// Data Fetching: List all Markdown posts in the repo.

const allRecipes = (await getCollection('recipe')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<html lang="en">
	<head>
		<BaseHead {title} {description} {permalink} />
	</head>

	<body class="mx-auto">
		<MainNav />
		<div class="wrapper px-3">
			<main class="content">
				<div class="search-wrapper">
					<input type="text" id="searchInput" placeholder="Search..." class="search-input">
					<button id="clearButton" class="search-clear">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-purple-800 w-5 h-5">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
						</svg>
					</button>
				</div>
				<section aria-label="Recipe list" class="searchable">
					{allRecipes.map((p) => <PostList post={p} />)}
				</section>
			</main>
		</div>
	</body>
</html>

<script>
	const searchInput = document.getElementById('searchInput');
	const clearButton = document.getElementById('clearButton');
	let results = document.querySelectorAll('.searchable');

	// Cache the initial set of results
	const initialResults = results;

	searchInput.addEventListener('input', debounce(search, 300));
	searchInput.addEventListener('input', toggleClearButton);
	clearButton.addEventListener('click', clearSearch);
	document.addEventListener('keydown', handleKeyDown);
	document.addEventListener('keydown', handleFocus);

	function search() {
		const searchText = searchInput.value.toLowerCase();

		results.forEach(function(result) {
			const text = result.textContent.toLowerCase();

			if (text.includes(searchText)) {
				result.classList.remove('hidden');
			} else {
				result.classList.add('hidden');
			}
		});
	}

	function clearSearch() {
		searchInput.value = '';
		results = initialResults;
		results.forEach(function(result) {
			result.classList.remove('hidden');
		});
		toggleClearButton();
	}

	function toggleClearButton() {
		if (searchInput.value === '') {
			clearButton.classList.add('hidden');
		} else {
			clearButton.classList.remove('hidden');
		}
	}

	function handleKeyDown(event) {
		if (event.key === 'Escape') {
			clearSearch();
			searchInput.blur();
		}
	}

	function handleFocus(event) {
		if (event.key === '/' && !searchInput.matches(':focus')) {
			event.preventDefault();
			searchInput.focus();
		}
	}

	// Debounce function to delay search execution
	function debounce(func, wait) {
		let timeout;
		return function executedFunction(...args) {
			const later = () => {
				clearTimeout(timeout);
				func(...args);
			};
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
		};
	}
</script>
